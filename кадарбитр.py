import re
import datetime
import time
import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.common.exceptions import TimeoutException, NoSuchElementException, StaleElementReferenceException, \
    ElementClickInterceptedException
from webdriver_manager.chrome import ChromeDriverManager
import json

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
EXCEL_FILE = "–¥–µ–ª–∞_–∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö_—Å—É–¥–æ–≤_–º–æ—Å–∫–≤–∞_–≤—á–µ—Ä–∞.xlsx"
KAD_ARB_URL = "https://kad.arbitr.ru/"


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞ ---
def get_driver():
    options = Options()
    options.add_argument('--disable-blink-features=AutomationControlled')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-gpu')
    options.add_argument('--disable-extensions')
    options.add_argument('--disable-popup-blocking')
    options.add_argument('--start-maximized')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--disable-web-security')
    options.add_argument('--allow-running-insecure-content')
    options.add_argument(
        '--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
    options.add_experimental_option("useAutomationExtension", False)
    options.add_experimental_option("excludeSwitches", ["enable-automation"])

    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=options)
    driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined});")
    driver.execute_script("Object.defineProperty(navigator, 'plugins', {get: () => [1, 2, 3, 4, 5]});")
    driver.execute_script("Object.defineProperty(navigator, 'languages', {get: () => ['en-US', 'en']});")
    return driver


# --- –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω ---
def close_popups(driver):
    try:
        close_buttons = driver.find_elements(By.CSS_SELECTOR,
                                             ".modal-close, .close, [aria-label='Close'], .b-promo_notification-popup .close")
        for button in close_buttons:
            if button.is_displayed():
                driver.execute_script("arguments[0].click();", button)
                time.sleep(1)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω: {e}")


# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—á–µ—Ä–∞—à–Ω–µ–π –¥–∞—Ç—ã ---
def get_yesterday():
    today = datetime.datetime.now()
    yesterday = today - datetime.timedelta(days=1)
    return yesterday.strftime("%d.%m.%Y")


# --- –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ–ª –∑–∞ –≤—á–µ—Ä–∞ –∏–∑ –ê–° –ú–æ—Å–∫–≤—ã ---
def parse_kad_cases(driver):
    cases = []
    day_yesterday_str = get_yesterday()
    page_num = 1

    print(f"üîç –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ: {day_yesterday_str}")
    print(f"üîç –§–∏–ª—å—Ç—Ä –ø–æ —Å—É–¥—É: –ê–° –≥–æ—Ä–æ–¥–∞ –ú–æ—Å–∫–≤—ã")

    try:
        driver.get(KAD_ARB_URL)
        wait = WebDriverWait(driver, 60)
        print("–û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        time.sleep(10)

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞
        close_popups(driver)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É: —Ç–æ–ª—å–∫–æ –≤—á–µ—Ä–∞
        print("–ò—â–µ–º –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç...")
        time.sleep(5)

        date_inputs = wait.until(EC.presence_of_all_elements_located(
            (By.CSS_SELECTOR, "input[type='text'][placeholder='–¥–¥.–º–º.–≥–≥–≥–≥']")
        ))
        print(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π –¥–ª—è –¥–∞—Ç: {len(date_inputs)}")

        if len(date_inputs) >= 2:
            print(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã: {day_yesterday_str} - {day_yesterday_str}")

            date_inputs[0].clear()
            time.sleep(1)
            date_inputs[0].send_keys(day_yesterday_str)
            time.sleep(2)

            date_inputs[1].clear()
            time.sleep(1)
            date_inputs[1].send_keys(day_yesterday_str)
            time.sleep(2)

            print("–î–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—è –¥–ª—è –¥–∞—Ç—ã")
            return []

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞ —Å–Ω–æ–≤–∞
        close_popups(driver)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä: —Ç–æ–ª—å–∫–æ "–ê–° –≥–æ—Ä–æ–¥–∞ –ú–æ—Å–∫–≤—ã"
        print("–ò—â–µ–º –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–¥–∞...")
        time.sleep(3)

        court_found = False
        court_selectors = [
            (By.ID, "courtName"),
            (By.CSS_SELECTOR, "input[name='courtName']"),
            (By.CSS_SELECTOR, "input[data-field='court']"),
            (By.CSS_SELECTOR, ".court-input input"),
            (By.CSS_SELECTOR, "[class*='court'] input"),
            (By.XPATH, "//input[contains(@name, 'court') or contains(@id, 'court')]"),
            (By.XPATH, "//input[contains(@placeholder, '—Å—É–¥') and not(contains(@placeholder, '—Å—É–¥—å—è'))]"),
            (By.XPATH, "//input[contains(@placeholder, '–°—É–¥') and not(contains(@placeholder, '–°—É–¥—å—è'))]"),
            (By.XPATH, "//label[contains(text(), '—Å—É–¥') and not(contains(text(), '—Å—É–¥—å—è'))]/following-sibling::input"),
            (By.XPATH, "//label[contains(text(), '–°—É–¥') and not(contains(text(), '–°—É–¥—å—è'))]/following-sibling::input"),
            (By.XPATH, "//label[contains(text(), '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—É–¥–∞')]/following-sibling::input"),
            (By.XPATH, "//label[contains(text(), '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—É–¥–∞')]/following-sibling::input")
        ]

        court_input = None
        for selector_type, selector in court_selectors:
            try:
                court_input = wait.until(EC.element_to_be_clickable((selector_type, selector)))
                if court_input.is_displayed() and court_input.is_enabled():
                    print(f"‚úÖ –ü–æ–ª–µ —Å—É–¥–∞ –Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä: {selector}")
                    court_found = True
                    break
            except Exception as e:
                print(f"  –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä... ({type(e).__name__})")
                continue

        if not court_found:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–¥–∞")
            return []

        if court_input:
            try:
                driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", court_input)
                time.sleep(1)
                court_input.clear()
                time.sleep(0.5)
                court_input.send_keys("–ê–° –≥–æ—Ä–æ–¥–∞ –ú–æ—Å–∫–≤—ã")
                time.sleep(2)
                print("–§–∏–ª—å—Ç—Ä –ø–æ —Å—É–¥—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –ê–° –≥–æ—Ä–æ–¥–∞ –ú–æ—Å–∫–≤—ã")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å—É–¥—É: {e}")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞ —Å–Ω–æ–≤–∞
        close_popups(driver)

        # –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–ù–∞–π—Ç–∏"
        print("–ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞...")
        time.sleep(3)

        search_clicked = False
        search_selectors = [
            (By.ID, "b-form-submit"),
            (By.CSS_SELECTOR, "#b-form-submit button"),
            (By.CSS_SELECTOR, ".b-form-submit button"),
            (By.CSS_SELECTOR, "button[type='submit']"),
            (By.XPATH, "//button[contains(text(), '–ù–∞–π—Ç–∏')]"),
            (By.CSS_SELECTOR, ".b-button button"),
            (By.CSS_SELECTOR, "button.btn-search"),
            (By.CSS_SELECTOR, "input[type='submit']"),
            (By.CSS_SELECTOR, ".search-button"),
            (By.CSS_SELECTOR, "[class*='search'] button")
        ]

        for selector_type, selector in search_selectors:
            try:
                search_button = wait.until(EC.element_to_be_clickable((selector_type, selector)))
                if search_button.is_displayed():
                    print(f"–ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä: {selector}, –∫–ª–∏–∫–∞–µ–º...")
                    driver.execute_script("arguments[0].scrollIntoView(true);", search_button)
                    time.sleep(1)
                    driver.execute_script("arguments[0].click();", search_button)
                    time.sleep(10)
                    search_clicked = True
                    break
            except Exception as e:
                print(f" –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–Ω–æ–ø–∫–∏... ({type(e).__name__}: {e})")
                continue

        if not search_clicked:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞")
            return []

        print(f"URL –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞: {driver.current_url}")
        print("–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü...")

        # –¶–∏–∫–ª –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        max_pages = 50
        while page_num <= max_pages:
            print(f"\nüìÑ –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_num}...")
            print(f"URL —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {driver.current_url}")
            time.sleep(5)

            try:
                tbody = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "#b-cases tbody")))
                rows = tbody.find_elements(By.TAG_NAME, "tr")

                print(f"–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: {len(rows)}")

                if not rows:
                    print("–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –¥–µ–ª.")
                    break

                page_cases = 0
                for row in rows:
                    try:
                        cells = row.find_elements(By.TAG_NAME, "td")
                        print(f"    –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ: {len(cells)}")

                        if len(cells) < 4:
                            print(f"    ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–ª–æ–Ω–æ–∫: {len(cells)}")
                            continue

                        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–ª–æ–Ω–æ–∫
                        first_cell_text = cells[0].text.strip() if len(cells) > 0 else ""
                        case_date = ""
                        case_number = ""

                        if first_cell_text:
                            date_match = re.search(r"(\d{2}\.\d{2}\.\d{4})", first_cell_text)
                            if date_match:
                                case_date = date_match.group(1)
                                case_number = first_cell_text.replace(case_date, "").strip()
                            else:
                                case_number = first_cell_text
                                year_match = re.search(r'/(\d{4})', case_number)
                                if year_match:
                                    year = year_match.group(1)
                                    case_date = f"01.01.{year}"

                        court = ""
                        judge = ""

                        if len(cells) > 1:
                            cell_text = cells[1].text.strip()
                            parts = cell_text.split('\n')
                            if len(parts) >= 2:
                                judge = parts[0].strip()
                                court = parts[1].strip()
                            else:
                                if "–∞—Å" in cell_text.lower() or "–∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π" in cell_text.lower():
                                    court = cell_text
                                else:
                                    judge = cell_text

                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–¥–∞: —Ç–æ–ª—å–∫–æ "–ê–° –≥–æ—Ä–æ–¥–∞ –ú–æ—Å–∫–≤—ã"
                        if "–º–æ—Å–∫–≤" not in court.lower() or "–∞—Å" not in court.lower():
                            print(f"    ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ–ª–æ {case_number} - —Å—É–¥ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç: '{court}'")
                            continue

                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã: —Ç–æ–ª—å–∫–æ –≤—á–µ—Ä–∞
                        if case_date != day_yesterday_str:
                            print(
                                f"    ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ–ª–æ {case_number} - –¥–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç: '{case_date}' (–æ–∂–∏–¥–∞–µ–º: {day_yesterday_str})")
                            continue

                        istets_names = []
                        istets_addresses = []
                        otvetchik_names = []
                        otvetchik_addresses = []

                        if len(cells) > 2:
                            plaintiff_text = cells[2].text.strip()
                            if plaintiff_text:
                                istets_names.append(plaintiff_text)
                                istets_addresses.append("")

                        if len(cells) > 3:
                            defendant_text = cells[3].text.strip()
                            if defendant_text:
                                otvetchik_names.append(defendant_text)
                                otvetchik_addresses.append("")

                        claim_amount = ""

                        case_data = {
                            '–ù–æ–º–µ—Ä –¥–µ–ª–∞': case_number,
                            '–î–∞—Ç–∞': case_date,
                            '–°—É–¥': court,
                            '–°—É–¥—å—è': judge,
                            '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏—Å—Ç—Ü–∞': ', '.join(istets_names),
                            '–ê–¥—Ä–µ—Å –∏—Å—Ç—Ü–∞': ', '.join(istets_addresses),
                            '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç—á–∏–∫–∞': ', '.join(otvetchik_names),
                            '–ê–¥—Ä–µ—Å –æ—Ç–≤–µ—Ç—á–∏–∫–∞': ', '.join(otvetchik_addresses),
                            '–°—É–º–º–∞ –∏—Å–∫–∞': claim_amount
                        }
                        cases.append(case_data)
                        page_cases += 1
                        print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–µ–ª–æ: {case_number}")

                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏: {e}")
                        continue

                print(f"üìä –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num} –Ω–∞–π–¥–µ–Ω–æ –¥–µ–ª: {page_cases}")
                print(f"üìà –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –¥–µ–ª: {len(cases)}")

                if page_cases == 0:
                    print("üõë –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –¥–µ–ª - –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥")
                    break

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–µ—ë
                try:
                    next_button = None
                    next_selectors = [
                        "a.next-link:not(.disabled)",
                        "a[class*='next']:not(.disabled)",
                        "button[class*='next']:not(.disabled)",
                        ".pagination .next:not(.disabled)",
                        ".pager .next:not(.disabled)",
                        "a[title*='–°–ª–µ–¥—É—é—â–∞—è']",
                        "a[title*='Next']",
                        "button[title*='–°–ª–µ–¥—É—é—â–∞—è']",
                        "button[title*='Next']",
                        "a[aria-label*='–°–ª–µ–¥—É—é—â–∞—è']",
                        "a[aria-label*='Next']",
                        ".pagination a:last-child:not(.disabled)",
                        ".pager a:last-child:not(.disabled)",
                        "a[href*='page']",
                        ".pagination a[href*='page']",
                        ".pager a[href*='page']"
                    ]

                    print("–ò—â–µ–º –∫–Ω–æ–ø–∫—É '–°–ª–µ–¥—É—é—â–∞—è'...")
                    for selector in next_selectors:
                        try:
                            elements = driver.find_elements(By.CSS_SELECTOR, selector)
                            for elem in elements:
                                if elem.is_enabled() and elem.is_displayed():
                                    next_button = elem
                                    print(f"–ö–Ω–æ–ø–∫–∞ '–°–ª–µ–¥—É—é—â–∞—è' –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä: {selector}")
                                    break
                            if next_button:
                                break
                        except Exception as e:
                            continue

                    if next_button and next_button.is_enabled() and next_button.is_displayed():
                        print("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
                        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", next_button)
                        time.sleep(1)
                        driver.execute_script("arguments[0].click();", next_button)
                        page_num += 1
                        print(f"–û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num}...")
                        time.sleep(15)

                        try:
                            current_url = driver.current_url
                            print(f"–¢–µ–∫—É—â–∏–π URL: {current_url}")
                        except Exception as e:
                            print(f"‚ùå –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã–ª—Å—è: {e}")
                            break

                        try:
                            wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "#b-cases tbody")))
                            print(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                        except TimeoutException:
                            print(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num}")
                            break
                    else:
                        print("–ö–Ω–æ–ø–∫–∞ '–°–ª–µ–¥—É—é—â–∞—è' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
                        break

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–æ–ø–∫–∏ '–°–ª–µ–¥—É—é—â–∞—è': {e}")
                    break

            except TimeoutException:
                print("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞–±–ª–∏—Ü—ã.")
                break
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
                break

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")

    return cases


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –¥–µ–ª –ê–° –ú–æ—Å–∫–≤—ã –∑–∞ –≤—á–µ—Ä–∞...")

    driver = None
    try:
        driver = get_driver()
        driver.get(KAD_ARB_URL)

        cases = parse_kad_cases(driver)

        if cases:
            print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–µ–ª: {len(cases)}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel
            df = pd.DataFrame(cases)
            df.to_excel(EXCEL_FILE, index=False)
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {EXCEL_FILE}")

        else:
            print("‚ö†Ô∏è –î–µ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        if driver:
            driver.quit()


if __name__ == "__main__":
    main()
